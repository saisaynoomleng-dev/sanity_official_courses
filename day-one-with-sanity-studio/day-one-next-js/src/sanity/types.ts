/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Album = {
  _id: string;
  _type: "album";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  artist?: string;
  releasedDate?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Event = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  eventType?: "outdoor" | "indoor" | "virtual";
  dateAndTime?: string;
  doorsOpen?: number;
  venue?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "venue";
  };
  headline?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "artist";
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  details?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  tickets?: string;
};

export type Artist = {
  _id: string;
  _type: "artist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  genre?: "techno" | "hipHop" | "country" | "rock" | "metalRock" | "edm";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  album?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "album";
  }>;
};

export type Venue = {
  _id: string;
  _type: "venue";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  address?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Album | Event | Artist | Venue | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../day-one-next-js/src/app/(frontend)/artist/[slug]/page.tsx
// Variable: ARTIST_DETAIL_QUERY
// Query: *[_type == 'artist'   && slug.current == $slug][0]{    image{      asset->{        url      }    },    album[]->{      name,      releasedDate,      image{        asset->{            url        }      }    },    genre,    name,    slug,    bio   }
export type ARTIST_DETAIL_QUERYResult = {
  image: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  album: Array<{
    name: string | null;
    releasedDate: string | null;
    image: {
      asset: {
        url: string | null;
      } | null;
    } | null;
  }> | null;
  genre: "country" | "edm" | "hipHop" | "metalRock" | "rock" | "techno" | null;
  name: string | null;
  slug: Slug | null;
  bio: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
} | null;

// Source: ../day-one-next-js/src/app/(frontend)/artist/page.tsx
// Variable: ARTISTS_QUERY
// Query: *[_type == 'artist'   && defined(slug.current)]{    image{      asset->{        url      }    },    genre,    name,    slug,   }
export type ARTISTS_QUERYResult = Array<{
  image: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  genre: "country" | "edm" | "hipHop" | "metalRock" | "rock" | "techno" | null;
  name: string | null;
  slug: Slug | null;
}>;

// Source: ../day-one-next-js/src/app/(frontend)/events/[slug]/page.tsx
// Variable: EVENT_QUERY
// Query: *[_type == 'event'   && slug.current == $slug][0]{    _id,    name,    headline->{      name,      genre    },    venue->{      name,      address    },    dateAndTime,    doorsOpen,    slug,    image{      asset->{        url      }    },    details   }
export type EVENT_QUERYResult = {
  _id: string;
  name: string | null;
  headline: {
    name: string | null;
    genre: "country" | "edm" | "hipHop" | "metalRock" | "rock" | "techno" | null;
  } | null;
  venue: {
    name: string | null;
    address: string | null;
  } | null;
  dateAndTime: string | null;
  doorsOpen: number | null;
  slug: Slug | null;
  image: {
    asset: {
      url: string | null;
    } | null;
  } | null;
  details: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
} | null;

// Source: ../day-one-next-js/src/app/(frontend)/page.tsx
// Variable: EVENTS_QUERY
// Query: *[_type == 'event'   && defined(slug.current)]{    _id,    name,    headline->{      name,      genre    },    venue->{      name,      address    },    dateAndTime,    doorsOpen,    slug,    image{      asset->{        url      }    }   } | order(date desc)
export type EVENTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  headline: {
    name: string | null;
    genre: "country" | "edm" | "hipHop" | "metalRock" | "rock" | "techno" | null;
  } | null;
  venue: {
    name: string | null;
    address: string | null;
  } | null;
  dateAndTime: string | null;
  doorsOpen: number | null;
  slug: Slug | null;
  image: {
    asset: {
      url: string | null;
    } | null;
  } | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == 'artist'\n   && slug.current == $slug][0]{\n    image{\n      asset->{\n        url\n      }\n    },\n    album[]->{\n      name,\n      releasedDate,\n      image{\n        asset->{\n            url\n        }\n      }\n    },\n    genre,\n    name,\n    slug,\n    bio\n   }": ARTIST_DETAIL_QUERYResult;
    "*[_type == 'artist'\n   && defined(slug.current)]{\n    image{\n      asset->{\n        url\n      }\n    },\n    genre,\n    name,\n    slug,\n   }": ARTISTS_QUERYResult;
    "*[_type == 'event'\n   && slug.current == $slug][0]{\n    _id,\n    name,\n    headline->{\n      name,\n      genre\n    },\n    venue->{\n      name,\n      address\n    },\n    dateAndTime,\n    doorsOpen,\n    slug,\n    image{\n      asset->{\n        url\n      }\n    },\n    details\n   }": EVENT_QUERYResult;
    "*[_type == 'event'\n   && defined(slug.current)]{\n    _id,\n    name,\n    headline->{\n      name,\n      genre\n    },\n    venue->{\n      name,\n      address\n    },\n    dateAndTime,\n    doorsOpen,\n    slug,\n    image{\n      asset->{\n        url\n      }\n    }\n   } | order(date desc)": EVENTS_QUERYResult;
  }
}
